// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"yima_news_app/dao/model"
)

func newSciNews(db *gorm.DB, opts ...gen.DOOption) sciNews {
	_sciNews := sciNews{}

	_sciNews.sciNewsDo.UseDB(db, opts...)
	_sciNews.sciNewsDo.UseModel(&model.SciNews{})

	tableName := _sciNews.sciNewsDo.TableName()
	_sciNews.ALL = field.NewAsterisk(tableName)
	_sciNews.ID = field.NewString(tableName, "id")
	_sciNews.Title = field.NewString(tableName, "title")
	_sciNews.Type = field.NewString(tableName, "type")
	_sciNews.UserID = field.NewString(tableName, "user_id")
	_sciNews.Link = field.NewString(tableName, "link")
	_sciNews.Cover = field.NewString(tableName, "cover")
	_sciNews.Downloads = field.NewInt32(tableName, "downloads")
	_sciNews.GmtCreate = field.NewTime(tableName, "gmt_create")
	_sciNews.CreateBy = field.NewString(tableName, "create_by")
	_sciNews.GmtUpdate = field.NewTime(tableName, "gmt_update")
	_sciNews.UpdateBy = field.NewString(tableName, "update_by")

	_sciNews.fillFieldMap()

	return _sciNews
}

type sciNews struct {
	sciNewsDo sciNewsDo

	ALL       field.Asterisk
	ID        field.String // 新闻ID
	Title     field.String // 新闻标题
	Type      field.String // 新闻类型
	UserID    field.String // 作者ID
	Link      field.String // 新闻链接
	Cover     field.String // 新闻封面链接
	Downloads field.Int32  // 下载量
	GmtCreate field.Time   // 创建时间
	CreateBy  field.String // 创建操作人
	GmtUpdate field.Time   // 更新时间
	UpdateBy  field.String // 更新操作人

	fieldMap map[string]field.Expr
}

func (s sciNews) Table(newTableName string) *sciNews {
	s.sciNewsDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sciNews) As(alias string) *sciNews {
	s.sciNewsDo.DO = *(s.sciNewsDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sciNews) updateTableName(table string) *sciNews {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Title = field.NewString(table, "title")
	s.Type = field.NewString(table, "type")
	s.UserID = field.NewString(table, "user_id")
	s.Link = field.NewString(table, "link")
	s.Cover = field.NewString(table, "cover")
	s.Downloads = field.NewInt32(table, "downloads")
	s.GmtCreate = field.NewTime(table, "gmt_create")
	s.CreateBy = field.NewString(table, "create_by")
	s.GmtUpdate = field.NewTime(table, "gmt_update")
	s.UpdateBy = field.NewString(table, "update_by")

	s.fillFieldMap()

	return s
}

func (s *sciNews) WithContext(ctx context.Context) *sciNewsDo { return s.sciNewsDo.WithContext(ctx) }

func (s sciNews) TableName() string { return s.sciNewsDo.TableName() }

func (s sciNews) Alias() string { return s.sciNewsDo.Alias() }

func (s sciNews) Columns(cols ...field.Expr) gen.Columns { return s.sciNewsDo.Columns(cols...) }

func (s *sciNews) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sciNews) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["title"] = s.Title
	s.fieldMap["type"] = s.Type
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["link"] = s.Link
	s.fieldMap["cover"] = s.Cover
	s.fieldMap["downloads"] = s.Downloads
	s.fieldMap["gmt_create"] = s.GmtCreate
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["gmt_update"] = s.GmtUpdate
	s.fieldMap["update_by"] = s.UpdateBy
}

func (s sciNews) clone(db *gorm.DB) sciNews {
	s.sciNewsDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sciNews) replaceDB(db *gorm.DB) sciNews {
	s.sciNewsDo.ReplaceDB(db)
	return s
}

type sciNewsDo struct{ gen.DO }

func (s sciNewsDo) Debug() *sciNewsDo {
	return s.withDO(s.DO.Debug())
}

func (s sciNewsDo) WithContext(ctx context.Context) *sciNewsDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sciNewsDo) ReadDB() *sciNewsDo {
	return s.Clauses(dbresolver.Read)
}

func (s sciNewsDo) WriteDB() *sciNewsDo {
	return s.Clauses(dbresolver.Write)
}

func (s sciNewsDo) Session(config *gorm.Session) *sciNewsDo {
	return s.withDO(s.DO.Session(config))
}

func (s sciNewsDo) Clauses(conds ...clause.Expression) *sciNewsDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sciNewsDo) Returning(value interface{}, columns ...string) *sciNewsDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sciNewsDo) Not(conds ...gen.Condition) *sciNewsDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sciNewsDo) Or(conds ...gen.Condition) *sciNewsDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sciNewsDo) Select(conds ...field.Expr) *sciNewsDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sciNewsDo) Where(conds ...gen.Condition) *sciNewsDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sciNewsDo) Order(conds ...field.Expr) *sciNewsDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sciNewsDo) Distinct(cols ...field.Expr) *sciNewsDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sciNewsDo) Omit(cols ...field.Expr) *sciNewsDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sciNewsDo) Join(table schema.Tabler, on ...field.Expr) *sciNewsDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sciNewsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sciNewsDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sciNewsDo) RightJoin(table schema.Tabler, on ...field.Expr) *sciNewsDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sciNewsDo) Group(cols ...field.Expr) *sciNewsDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sciNewsDo) Having(conds ...gen.Condition) *sciNewsDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sciNewsDo) Limit(limit int) *sciNewsDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sciNewsDo) Offset(offset int) *sciNewsDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sciNewsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sciNewsDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sciNewsDo) Unscoped() *sciNewsDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sciNewsDo) Create(values ...*model.SciNews) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sciNewsDo) CreateInBatches(values []*model.SciNews, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sciNewsDo) Save(values ...*model.SciNews) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sciNewsDo) First() (*model.SciNews, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SciNews), nil
	}
}

func (s sciNewsDo) Take() (*model.SciNews, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SciNews), nil
	}
}

func (s sciNewsDo) Last() (*model.SciNews, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SciNews), nil
	}
}

func (s sciNewsDo) Find() ([]*model.SciNews, error) {
	result, err := s.DO.Find()
	return result.([]*model.SciNews), err
}

func (s sciNewsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SciNews, err error) {
	buf := make([]*model.SciNews, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sciNewsDo) FindInBatches(result *[]*model.SciNews, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sciNewsDo) Attrs(attrs ...field.AssignExpr) *sciNewsDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sciNewsDo) Assign(attrs ...field.AssignExpr) *sciNewsDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sciNewsDo) Joins(fields ...field.RelationField) *sciNewsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sciNewsDo) Preload(fields ...field.RelationField) *sciNewsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sciNewsDo) FirstOrInit() (*model.SciNews, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SciNews), nil
	}
}

func (s sciNewsDo) FirstOrCreate() (*model.SciNews, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SciNews), nil
	}
}

func (s sciNewsDo) FindByPage(offset int, limit int) (result []*model.SciNews, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sciNewsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sciNewsDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sciNewsDo) Delete(models ...*model.SciNews) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sciNewsDo) withDO(do gen.Dao) *sciNewsDo {
	s.DO = *do.(*gen.DO)
	return s
}
